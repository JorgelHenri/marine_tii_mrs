<launch>
    <!-- This launch file will start the controller nodes with the necessary parameters -->

    <!--
    Vehicle namespace: since the simulation can run with multiple vehicle, each vehicle
    is created under a namespace, which is per default equal to the name of vehicle model, but
    can be assigned differently at startup
    -->
    <arg name="uuv_name"/>
    <!-- Name of the vehicle model: the name of the robot model -->
    <arg name="model_name" default="$(arg uuv_name)"/>

    <!-- Control effort saturation -->
    <arg name="saturation" default="5000"/>
    
    <arg name="use_sim" default="true"/>

    <arg name="output_dir" default="$(find uuv_thruster_manager)/config/$(arg model_name)"/>
    <arg name="config_file" default="$(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml"/>
    <arg name="tam_file" default="$(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml"/>
    <!--
    For the control vector to be distributed amongst the thrusters, a thruster manager node
    has to be initialized for this specific vehicle. The thruster manager will calculate the
    thruster allocation matrix if none is provided, but it is better if the TAM is stored
    in a YAML file beforehand. Check the tutorial on how to initialize the thruster allocation
    matrix.
    -->
    <include file="$(find uuv_thruster_manager)/launch/thruster_manager.launch">
        <!--
        The thruster manager will use the namespace uuv_name to initialize the node and
        will use the robot's model_name to search for the YAML file containing the thruster
        allocation matrix.
        -->
        <arg name="uuv_name" value="$(arg uuv_name)"/>
        <arg name="model_name" value="$(arg model_name)"/>
        <arg name="output_dir" value="$(arg output_dir)"/>
        <arg name="config_file" value="$(arg config_file)"/>
        <arg name="tam_file" value="$(arg tam_file)"/>
    </include>

    <node pkg="rqt_reconfigure" type="rqt_reconfigure" name="my_rqt_reconfigure" />

    <!--
    It is important to start all nodes relative to this vehicle under the vehicle's
    namespace in order to avoid errors and parameter being initialized in wrong place.
    Most of the nodes per default are going to look for configuration parameters and
    topics under the vehicle's namespace per default.
    -->
    <group ns="$(arg uuv_name)">
        <!--
        This node just reads the trajectory and waypoint topics and publishes visualization
        markers to RViz, but is not essential to the controller's operation
        -->
        <node pkg="uuv_control_utils"
              type="trajectory_marker_publisher.py"
              name="trajectory_marker_publisher"
              output="screen">
            <remap from="trajectory" to="dp_controller/trajectory"/>
            <remap from="waypoints" to="dp_controller/waypoints"/>
            <remap from="reference" to="dp_controller/reference"/>
        </node>
        
        <node pkg="nukhada_control"
            type="dp_controller.py"
            name="dp_controller"
            output="screen">
            <!-- Remap necessary topics -->
            <remap from="odom" to="pose_gt" if="$(arg use_sim)"/>
            <remap from="odom" to="odom_real" unless="$(arg use_sim)" />
            <remap from="trajectory" to="dp_controller/trajectory"/>
            <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
            <remap from="waypoints" to="dp_controller/waypoints"/>
            <remap from="error" to="dp_controller/error"/>
            <remap from="reference" to="dp_controller/reference"/>
            <remap from="thruster_output" to="thruster_manager/input_stamped"/>

            <rosparam param="max_forward_speed">0.6</rosparam>
        </node>
    </group>
</launch>
